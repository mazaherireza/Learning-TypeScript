(()=>{"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}const t=function(e,t,n){const{value:r}=n;return{configurable:!0,get(){return r.bind(this)}}};function n(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}class r{constructor(e,t,n){this.title=e,this.description=t,this.status=n}}var s;!function(e){e.Is_Doing="IS_DOING",e.Done="DONE"}(s||(s={}));class i{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class o extends i{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new o),this.instance}addProject(e,t){const n=new r(e,t,s.Is_Doing);this.projects.push(n),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.title==e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e([...this.projects])}}console.log("EXPORTED!");const l=o.getInstance();class a extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleElement=this.element.querySelector("#title"),this.descriptionElement=this.element.querySelector("#description"),this.formElement=document.querySelector("form"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}clearForm(){this.formElement.reset()}gatherUserInput(){const e=this.titleElement.value,t=this.descriptionElement.value,r={value:t,required:!1,minLength:8,maxLength:800};return n({value:e,required:!0,minLength:8,maxLength:80})&&n(r)?[e,t]:void 0}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n]=t;l.addProject(e,n)}console.log(this.titleElement.value),this.clearForm()}}!function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([t],a.prototype,"configure",null);class c extends e{constructor(e,t){super("single-project",e,!1),this.project=t,this.configure(),this.renderContent()}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.title),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler),this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.project.description}renderContent(){}}!function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([t],c.prototype,"dragStartHandler",null);var d=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class u extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"==e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");l.moveProject(t,this.type==s.Done?s.Is_Doing:s.Done)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),l.addListener((e=>{const t=e.filter((e=>this.type==s.Done?e.status==s.Done:e.status==s.Is_Doing));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" Projects  "}renderProjects(){document.querySelector(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new c(this.element.querySelector("ul").id,e)}}d([t],u.prototype,"dragOverHandler",null),d([t],u.prototype,"dropHandler",null),d([t],u.prototype,"dragLeaveHandler",null),new a,new u(s.Is_Doing)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,