Optional Type Members
---------------------
...
TypeScript allows us to make some type members optional. 
Take a look at this code:

interface OptionsType {
  name: string;
  size?: string;
}
 
function listFile(options: OptionsType) {
  let fileName = options.name; 
  if (options.size) {
    fileName = `${fileName}: ${options.size}`;
  } 
  return fileName;
}

In the example, OptionsType has an optional type member named size. 

We can denote any type member as optional using the ? operator after the property name and before the colon (:), 
like this: size?: string;. 
Since size is optional, we added a conditional to check if it exists before trying to use the size property.

The optional parameter allows us to call listFile() with a parameter that does not include a size property at all, like this:

listFile({ name: 'readme.txt' })

Optional type members in TypeScript allow us to create programs that donâ€™t require us to pass in every possible key-value pair, 
making our programs more concise and easier to reason about.

