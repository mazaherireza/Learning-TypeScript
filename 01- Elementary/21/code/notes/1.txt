Using "in" with Type Guards
---------------------------
As we write more types, we're bound to create custom types to better describe our data's properties and methods. 
While using typeof can get us pretty far, sometimes we want to see if a specific method exists on a type instead of a type like 'string'. 
That's where the "in" operator comes into play. 

The "in" operator checks if a property exists on an object itself or anywhere within its prototype chain. 
Take a look at this example:

type Tennis = {
  serve: () => void;
}
 
type Soccer = {
  kick: () => void;
}
 
function play(sport: Tennis | Soccer) {
  if ('serve' in sport) {
    return sport.serve();
  } 
  if ('kick' in sport) {
    return sport.kick();
  }
}

In the example above, we check if the 'serve' property exists on sport with the in operator. 

The 'serve' property must exist inside the conditional, so TypeScript can narrow sport's type inside the conditional to be of type Tennis. 
This type narrowing is possible because TypeScript recognizes in as a type guard.