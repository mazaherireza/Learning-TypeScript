Narrowing with else
-------------------
..., we've used two separate if statements as type guards to handle each possible type. 
It turns out that TypeScript can recognize the else block of an if/else statement 
as being the opposite type guard check of the if statement's type guard check. 
For example:

function formatPadding(padding: string | number) {
  if (typeof padding === "string") {
    return padding.toLowerCase();
  } else {
    return `${padding}px`;
  }
}

..., the formatPadding() function can take in a value for CSS padding like the number 32 or the string "0 32px". 
Then a type guard is used to figure out how to format the padding argument.

The type guard typeof padding === "string" tells TypeScript that padding within the if statement's block must be a string. 
Going further, TypeScript is also able to infer that, since the padding argument is typed as the union string | number, 
that padding must be a number type within the else block.

Since TypeScript can understand how our code will work at runtime, 
it's able to infer specific types for us, like with the else of an if/else statement.
