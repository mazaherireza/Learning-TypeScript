Type Aliases
------------
One great way to customize the types in our programs is to use type aliases. 
These are alternative type names that we choose for convenience. 

We use the format "type <alias name> = <type>" <-------------------- **

type MyString = string;
let myVar: MyString = 'Hi'; // Valid code.

Coming up with alternate names for string may not be very useful, but this can be done with any type whatever.
Type aliases are truly useful for referring to complicated types that need to be repeated, 
especially object types and tuple types.

type Person = {
  name: string, 
  age: number
};

let aCompany: {
  companyName: string, 
  boss: Person, 
  employees:Person[], 
  employeeOfTheMonth: Person,  
  moneyEarned: number
};

TypeScript aliases are nothing more than names. 
They have absolutely no influence over how types work. 